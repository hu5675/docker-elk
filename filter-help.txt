
filter {
    mutate {
      strip => "message"
      gsub => ["message", "LINE_BREAK", "\n"]
    }
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:loglevel} :%{DATA:thread} : %{NUMBER:thread_pool} \[(?<classname>[^\]]+)\] %{SPACE} %{GREEDYDATA:msgbody}"
      }
    }
    date {
      match => ["logdate", "yyyy-MM-dd HH:mm:ss,SSS", "ISO8601"]
    }
}

filter {
    mutate {
      strip => "message"
    }
    grok {
      match => {
        "message" => "\[%{LOGLEVEL:loglevel}\] \[(?<logdate>([\s\S]*?))\]\[(?<classname>([\s\S]*?))\](?<message>([\s\S]*^\[))"
      }
    }
    date {
      match => ["logdate", "yyyy-MM-dd HH:mm:ss", "ISO8601"]
    }
}


[ERROR] [2018-11-01 16:19:35][org.quartz.impl.jdbcjobstore.JobStoreTX] asdfasd

\[%{LOGLEVEL:loglevel}\] \[(?<logdate>([\s\S]*?))\]\[(?<classname>([\s\S]*?))\](?<message>([\s\S]*Caused by[\s\S]*))



 ### Multiline options

  # Multiline can be used for log messages spanning multiple lines. This is common
  # for Java Stack Traces or C-Line Continuation

  # The regexp Pattern that has to be matched. The example pattern matches all lines starting with [
  #multiline.pattern: ^\[

  # Defines if the pattern set under pattern should be negated or not. Default is false.
  #multiline.negate: false

  # Match can be set to "after" or "before". It is used to define if lines should be append to a pattern
  # that was (not) matched before or after or as long as a pattern is not matched based on negate.
  # Note: After is the equivalent to previous and before is the equivalent to to next in Logstash
  #multiline.match: after

  # The maximum number of lines that are combined to one event.
  # In case there are more the max_lines the additional lines are discarded.
  # Default is 500
  #multiline.max_lines: 500